{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"UserProfile": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"email",
					"phone"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateProfileRequest": {
				"properties": {
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CreateSettingResponse": {
				"properties": {
					"id": {
						"type": "string"
					},
					"key": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"userId": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"key",
					"value",
					"userId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateSettingRequest": {
				"properties": {
					"key": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				},
				"required": [
					"key",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateSettingRequest": {
				"properties": {
					"value": {
						"type": "string"
					}
				},
				"required": [
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"_AddressType": {
				"properties": {
					"postalCode": {
						"type": "string"
					},
					"landmark": {
						"type": "string"
					},
					"addressType": {
						"type": "string"
					},
					"longitude": {
						"type": "number",
						"format": "double"
					},
					"latitude": {
						"type": "number",
						"format": "double"
					},
					"country": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"street": {
						"type": "string"
					},
					"address_line2": {
						"type": "string"
					},
					"address_line1": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"postalCode",
					"landmark",
					"addressType",
					"longitude",
					"latitude",
					"country",
					"state",
					"city",
					"street",
					"address_line2",
					"address_line1",
					"id"
				],
				"type": "object"
			},
			"CreatedAddressResponse": {
				"properties": {
					"message": {
						"type": "string"
					},
					"address": {
						"$ref": "#/components/schemas/_AddressType"
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateTaskRequest": {
				"properties": {
					"taskId": {
						"type": "string"
					},
					"cartId": {
						"type": "string"
					}
				},
				"required": [
					"taskId",
					"cartId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TaskResponse": {
				"properties": {
					"status": {
						"type": "string"
					},
					"output": {
						"properties": {
							"createdAt": {
								"type": "string",
								"format": "date-time"
							},
							"userId": {
								"type": "string"
							},
							"taskId": {
								"type": "string"
							},
							"cartId": {
								"type": "string"
							}
						},
						"required": [
							"createdAt",
							"userId",
							"taskId",
							"cartId"
						],
						"type": "object"
					}
				},
				"required": [
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RazorPayOrderResponse": {
				"properties": {
					"id": {
						"type": "string"
					},
					"entity": {
						"type": "string"
					},
					"amount": {
						"anyOf": [
							{
								"type": "number",
								"format": "double"
							},
							{
								"type": "string"
							}
						]
					},
					"currency": {
						"type": "string"
					},
					"receipt": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"created_at": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"id",
					"entity",
					"amount",
					"currency",
					"status",
					"created_at"
				],
				"type": "object",
				"additionalProperties": false
			},
			"_CartReponseItem": {
				"properties": {
					"itemWeightUnit": {
						"type": "string"
					},
					"itemWeight": {
						"type": "number",
						"format": "double"
					},
					"itemStockStatus": {
						"type": "string"
					},
					"itemDiscountedPrice": {
						"type": "number",
						"format": "double"
					},
					"itemOriginalPrice": {
						"type": "number",
						"format": "double"
					},
					"itemQuantity": {
						"type": "number",
						"format": "double"
					},
					"itemImageUrl": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"itemDescription": {
						"type": "string"
					},
					"itemName": {
						"type": "string"
					},
					"itemId": {
						"type": "string"
					}
				},
				"required": [
					"itemWeightUnit",
					"itemWeight",
					"itemStockStatus",
					"itemDiscountedPrice",
					"itemOriginalPrice",
					"itemQuantity",
					"itemImageUrl",
					"itemDescription",
					"itemName",
					"itemId"
				],
				"type": "object"
			},
			"CouponModelType": {
				"properties": {
					"users": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"usageCount": {
						"type": "number",
						"format": "double"
					},
					"usageLimit": {
						"type": "number",
						"format": "double"
					},
					"maximumOrderValue": {
						"type": "string"
					},
					"minimumOrderValue": {
						"type": "string"
					},
					"expiryDate": {
						"type": "string",
						"format": "date-time"
					},
					"startDate": {
						"type": "string",
						"format": "date-time"
					},
					"discountValue": {
						"type": "string"
					},
					"discountType": {
						"type": "string"
					},
					"couponCode": {
						"type": "string"
					},
					"id": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"users",
					"usageCount",
					"usageLimit",
					"maximumOrderValue",
					"minimumOrderValue",
					"expiryDate",
					"startDate",
					"discountValue",
					"discountType",
					"couponCode",
					"id"
				],
				"type": "object"
			},
			"ExposedCouponModel": {
				"properties": {
					"values": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CouponModelType"
							}
						],
						"nullable": true
					},
					"discountedAmount": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"applied": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"values",
					"discountedAmount",
					"applied",
					"message"
				],
				"type": "object"
			},
			"_CartResponseType": {
				"properties": {
					"coupon": {
						"$ref": "#/components/schemas/ExposedCouponModel"
					},
					"additionalInfo": {
						"properties": {
							"cartNote": {
								"type": "string"
							},
							"savingsMessage": {
								"type": "string"
							}
						},
						"required": [
							"cartNote",
							"savingsMessage"
						],
						"type": "object"
					},
					"storeInfo": {
						"properties": {
							"storeAddress": {
								"type": "string"
							},
							"storeContactPerson": {
								"type": "string"
							},
							"storePhone": {
								"type": "string"
							},
							"storeName": {
								"type": "string"
							}
						},
						"required": [
							"storeAddress",
							"storeContactPerson",
							"storePhone",
							"storeName"
						],
						"type": "object"
					},
					"orderSummary": {
						"properties": {
							"discount": {
								"type": "number",
								"format": "double"
							},
							"saved": {
								"type": "string"
							},
							"deliveryCharges": {
								"type": "number",
								"format": "double"
							},
							"freeDeliveryThreshold": {
								"type": "number",
								"format": "double"
							},
							"deliverytime": {
								"type": "string"
							},
							"total": {
								"type": "number",
								"format": "double"
							},
							"subTotal": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"discount",
							"saved",
							"deliveryCharges",
							"freeDeliveryThreshold",
							"deliverytime",
							"total",
							"subTotal"
						],
						"type": "object"
					},
					"recommendedItems": {
						"items": {
							"$ref": "#/components/schemas/_CartReponseItem"
						},
						"type": "array"
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/_CartReponseItem"
						},
						"type": "array"
					},
					"cartId": {
						"type": "string"
					},
					"aiStoreId": {
						"type": "string"
					}
				},
				"required": [
					"coupon",
					"additionalInfo",
					"storeInfo",
					"orderSummary",
					"recommendedItems",
					"items",
					"cartId",
					"aiStoreId"
				],
				"type": "object"
			},
			"_OrderResponse": {
				"properties": {
					"userId": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"createdDate": {
						"type": "string"
					},
					"riderPhone": {
						"type": "string"
					},
					"riderName": {
						"type": "string"
					},
					"trackingURL": {
						"type": "string"
					},
					"endOTP": {
						"type": "string"
					},
					"orderDeliveryStatus": {
						"type": "string"
					},
					"orderStatus": {
						"type": "string"
					},
					"address": {
						"$ref": "#/components/schemas/_AddressType"
					},
					"cart": {
						"$ref": "#/components/schemas/_CartResponseType"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"userId",
					"phone",
					"createdDate",
					"riderPhone",
					"riderName",
					"trackingURL",
					"endOTP",
					"orderDeliveryStatus",
					"orderStatus",
					"address",
					"cart",
					"id"
				],
				"type": "object"
			},
			"VerifyPaymentRequest": {
				"properties": {
					"order_id": {
						"type": "string"
					},
					"payment_id": {
						"type": "string"
					},
					"signature": {
						"type": "string"
					},
					"cart_id": {
						"type": "string"
					},
					"address_id": {
						"type": "string"
					},
					"userId": {
						"type": "string"
					}
				},
				"required": [
					"order_id",
					"payment_id",
					"signature",
					"cart_id",
					"address_id",
					"userId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Notification": {
				"properties": {
					"id": {
						"type": "string"
					},
					"notificationMessage": {
						"type": "string"
					},
					"notificationMediaUrl": {
						"type": "string",
						"nullable": true
					},
					"userId": {
						"type": "string"
					},
					"notificationCreatedDate": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"id",
					"notificationMessage",
					"notificationMediaUrl",
					"userId",
					"notificationCreatedDate"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateNotificationResponse": {
				"properties": {
					"message": {
						"type": "string"
					},
					"notification": {
						"$ref": "#/components/schemas/Notification"
					}
				},
				"required": [
					"message",
					"notification"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateNotificationRequest": {
				"properties": {
					"message": {
						"type": "string"
					},
					"media_url": {
						"type": "string"
					},
					"userId": {
						"type": "string"
					}
				},
				"required": [
					"message",
					"userId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateOrderResponse": {
				"properties": {
					"message": {
						"type": "string"
					},
					"orderId": {
						"type": "string"
					},
					"orderStatus": {
						"type": "string"
					},
					"deliveryStatus": {
						"type": "string"
					}
				},
				"required": [
					"message",
					"orderId",
					"orderStatus",
					"deliveryStatus"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateOrderRequest": {
				"properties": {
					"apiKey": {
						"type": "string"
					},
					"orderId": {
						"type": "string"
					},
					"orderStatus": {
						"type": "string"
					},
					"deliveryStatus": {
						"type": "string"
					},
					"endOTP": {
						"type": "string"
					},
					"trackingURL": {
						"type": "string"
					},
					"riderName": {
						"type": "string"
					},
					"riderPhone": {
						"type": "string"
					}
				},
				"required": [
					"apiKey",
					"orderId",
					"orderStatus",
					"deliveryStatus",
					"endOTP",
					"trackingURL",
					"riderName",
					"riderPhone"
				],
				"type": "object",
				"additionalProperties": false
			},
			"_CartItemsModelType": {
				"properties": {
					"itemExternalId": {
						"type": "string",
						"nullable": true
					},
					"itemRecommended": {
						"type": "boolean"
					},
					"itemWeightUnit": {
						"type": "string"
					},
					"itemWeight": {
						"type": "number",
						"format": "double"
					},
					"itemStockStatus": {
						"type": "string"
					},
					"itemDiscountedPrice": {
						"type": "number",
						"format": "double"
					},
					"itemOriginalPrice": {
						"type": "number",
						"format": "double"
					},
					"itemQuantity": {
						"type": "number",
						"format": "double"
					},
					"itemImageUrl": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"itemDescription": {
						"type": "string"
					},
					"itemName": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"itemExternalId",
					"itemRecommended",
					"itemWeightUnit",
					"itemWeight",
					"itemStockStatus",
					"itemDiscountedPrice",
					"itemOriginalPrice",
					"itemQuantity",
					"itemImageUrl",
					"itemDescription",
					"itemName"
				],
				"type": "object"
			},
			"OndcStoreAddress": {
				"properties": {
					"contactPersonMobile": {
						"type": "string"
					},
					"contactPersonName": {
						"type": "string"
					},
					"longitude": {
						"type": "number",
						"format": "double"
					},
					"latitude": {
						"type": "number",
						"format": "double"
					},
					"country": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"state": {
						"type": "string"
					},
					"nearBy": {
						"type": "string"
					},
					"address2": {
						"type": "string"
					},
					"address1": {
						"type": "string"
					},
					"pincode": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"contactPersonMobile",
					"contactPersonName",
					"longitude",
					"latitude",
					"country",
					"city",
					"state",
					"nearBy",
					"address2",
					"address1",
					"pincode"
				],
				"type": "object"
			},
			"OndcStatutoryReqsPackagedCommodities": {
				"properties": {
					"net_quantity_or_measure_of_commodity_in_pkg": {
						"type": "string"
					},
					"month_year_of_manufacture_packing_import": {
						"type": "string"
					},
					"common_or_generic_name_of_commodity": {
						"type": "string"
					},
					"imported_product_country_of_origin": {
						"type": "string"
					},
					"manufacturer_or_packer_address": {
						"type": "string"
					},
					"manufacturer_or_packer_name": {
						"type": "string"
					}
				},
				"required": [
					"net_quantity_or_measure_of_commodity_in_pkg",
					"month_year_of_manufacture_packing_import",
					"common_or_generic_name_of_commodity",
					"imported_product_country_of_origin",
					"manufacturer_or_packer_address",
					"manufacturer_or_packer_name"
				],
				"type": "object"
			},
			"OndcCatalogue": {
				"properties": {
					"statutory_reqs_packaged_commodities": {
						"$ref": "#/components/schemas/OndcStatutoryReqsPackagedCommodities"
					},
					"petpoojaVariationId": {
						"type": "string"
					},
					"petpoojaAddonitemId": {
						"type": "string"
					},
					"childCustomGroupId": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"availableQuantity": {
						"type": "string"
					},
					"mainRestaurantId": {
						"type": "string"
					},
					"discountedPrice": {
						"type": "string"
					},
					"countryOfOrigin": {
						"type": "string"
					},
					"petpoojaItemId": {
						"type": "string"
					},
					"subCategoryId": {
						"type": "string"
					},
					"productImages": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"packagingCost": {
						"type": "number",
						"format": "double"
					},
					"isCancellable": {
						"type": "boolean"
					},
					"customGroupId": {
						"type": "string"
					},
					"restaurantId": {
						"type": "string"
					},
					"packagedFood": {
						"type": "boolean"
					},
					"isReturnable": {
						"type": "boolean"
					},
					"productName": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"weightUnit": {
						"type": "string"
					},
					"categoryId": {
						"type": "string"
					},
					"bulkUpload": {
						"type": "boolean"
					},
					"updatedAt": {
						"type": "string"
					},
					"productId": {
						"type": "string"
					},
					"isDeleted": {
						"type": "boolean"
					},
					"createdAt": {
						"type": "string"
					},
					"isCustom": {
						"type": "boolean"
					},
					"weight": {
						"type": "number",
						"format": "double"
					},
					"userId": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"menuId": {
						"type": "string"
					},
					"price": {
						"type": "string"
					},
					"brand": {
						"type": "string"
					},
					"tax": {
						"type": "number",
						"format": "double"
					},
					"gst": {
						"type": "number",
						"format": "double"
					},
					"_id": {
						"type": "string"
					},
					"__v": {
						"type": "number",
						"format": "double"
					},
					"l4": {
						"type": "string"
					},
					"l3": {
						"type": "string"
					}
				},
				"required": [
					"statutory_reqs_packaged_commodities",
					"petpoojaVariationId",
					"petpoojaAddonitemId",
					"childCustomGroupId",
					"availableQuantity",
					"mainRestaurantId",
					"discountedPrice",
					"countryOfOrigin",
					"petpoojaItemId",
					"subCategoryId",
					"productImages",
					"packagingCost",
					"isCancellable",
					"customGroupId",
					"restaurantId",
					"packagedFood",
					"isReturnable",
					"productName",
					"description",
					"weightUnit",
					"categoryId",
					"bulkUpload",
					"updatedAt",
					"productId",
					"isDeleted",
					"createdAt",
					"isCustom",
					"weight",
					"userId",
					"status",
					"menuId",
					"price",
					"brand",
					"tax",
					"gst",
					"_id",
					"__v",
					"l4",
					"l3"
				],
				"type": "object"
			},
			"ItemProduct": {
				"properties": {
					"createdAt": {
						"type": "string"
					},
					"storeId": {
						"type": "string"
					},
					"lastUpdated": {
						"type": "string"
					},
					"metadata": {
						"$ref": "#/components/schemas/OndcCatalogue"
					},
					"kikoId": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"createdAt",
					"storeId",
					"lastUpdated",
					"metadata",
					"kikoId",
					"id"
				],
				"type": "object"
			},
			"MorRItems": {
				"properties": {
					"product": {
						"$ref": "#/components/schemas/ItemProduct"
					},
					"matchReason": {
						"type": "string"
					},
					"confidence": {
						"type": "string"
					},
					"productId": {
						"type": "string"
					}
				},
				"required": [
					"product",
					"matchReason",
					"productId"
				],
				"type": "object"
			},
			"ItemsMetadata": {
				"properties": {
					"recommendations": {
						"items": {
							"$ref": "#/components/schemas/MorRItems"
						},
						"type": "array"
					},
					"matching": {
						"$ref": "#/components/schemas/MorRItems"
					}
				},
				"required": [
					"recommendations",
					"matching"
				],
				"type": "object"
			},
			"Items": {
				"properties": {
					"metadata": {
						"$ref": "#/components/schemas/ItemsMetadata"
					},
					"unit": {
						"type": "string"
					},
					"quantity": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"metadata",
					"unit",
					"quantity",
					"name"
				],
				"type": "object"
			},
			"OriginalItems": {
				"properties": {
					"unit": {
						"type": "string"
					},
					"quantity": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"unit",
					"quantity",
					"name"
				],
				"type": "object"
			},
			"Result": {
				"properties": {
					"originalItems": {
						"items": {
							"$ref": "#/components/schemas/OriginalItems"
						},
						"type": "array"
					},
					"completeness": {
						"type": "number",
						"format": "double"
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/Items"
						},
						"type": "array"
					},
					"storeData": {
						"properties": {
							"ondcOrderServiceability": {
								"properties": {
									"panIndiaDeliveryCharges": {
										"type": "number",
										"format": "double"
									},
									"freeDeliveryMinValue": {
										"type": "number",
										"format": "double"
									},
									"panIndiaDelivery": {
										"type": "boolean"
									},
									"nightTimeTat": {
										"type": "string"
									},
									"freeDelivery": {
										"type": "boolean"
									},
									"dayTimeTat": {
										"type": "string"
									}
								},
								"required": [
									"panIndiaDeliveryCharges",
									"freeDeliveryMinValue",
									"panIndiaDelivery",
									"nightTimeTat",
									"freeDelivery",
									"dayTimeTat"
								],
								"type": "object"
							},
							"deliveryRadius": {
								"type": "number",
								"format": "double"
							},
							"storeAddress": {
								"$ref": "#/components/schemas/OndcStoreAddress"
							},
							"ondcVerified": {
								"type": "boolean"
							},
							"fssaiLicense": {
								"type": "string"
							},
							"storeTiming": {
								"properties": {
									"availability": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"storeTime": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"breakTime": {
										"items": {
											"type": "string"
										},
										"type": "array"
									},
									"holidays": {
										"items": {
											"type": "string"
										},
										"type": "array"
									}
								},
								"required": [
									"availability",
									"storeTime",
									"breakTime",
									"holidays"
								],
								"type": "object"
							},
							"storeStatus": {
								"type": "string"
							},
							"storeImages": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"description": {
								"type": "string"
							},
							"storeName": {
								"type": "string"
							},
							"storeLogo": {
								"type": "string"
							},
							"mobile": {
								"type": "string"
							},
							"phone": {
								"type": "string"
							},
							"email": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"_id": {
								"type": "string"
							},
							"id": {
								"type": "string"
							}
						},
						"required": [
							"ondcOrderServiceability",
							"deliveryRadius",
							"storeAddress",
							"ondcVerified",
							"fssaiLicense",
							"storeTiming",
							"storeStatus",
							"storeImages",
							"description",
							"storeName",
							"storeLogo",
							"mobile",
							"phone",
							"email",
							"name",
							"_id",
							"id"
						],
						"type": "object"
					},
					"storeId": {
						"type": "string"
					}
				},
				"required": [
					"originalItems",
					"completeness",
					"items",
					"storeData",
					"storeId"
				],
				"type": "object"
			},
			"TaskResult": {
				"properties": {
					"result": {
						"$ref": "#/components/schemas/Result"
					},
					"progress": {
						"type": "number",
						"format": "double"
					},
					"state": {
						"type": "string"
					},
					"taskId": {
						"type": "string"
					}
				},
				"required": [
					"result",
					"progress",
					"state",
					"taskId"
				],
				"type": "object"
			},
			"CartItemsModelType": {
				"properties": {
					"itemExternalId": {
						"type": "string",
						"nullable": true
					},
					"itemRecommended": {
						"type": "boolean"
					},
					"itemWeightUnit": {
						"type": "string"
					},
					"itemWeight": {
						"type": "number",
						"format": "double"
					},
					"itemStockStatus": {
						"type": "string"
					},
					"itemDiscountedPrice": {
						"type": "number",
						"format": "double"
					},
					"itemOriginalPrice": {
						"type": "number",
						"format": "double"
					},
					"itemQuantity": {
						"type": "number",
						"format": "double"
					},
					"itemImageUrl": {
						"type": "string"
					},
					"itemDescription": {
						"type": "string"
					},
					"itemName": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"itemExternalId",
					"itemRecommended",
					"itemWeightUnit",
					"itemWeight",
					"itemStockStatus",
					"itemDiscountedPrice",
					"itemOriginalPrice",
					"itemQuantity",
					"itemImageUrl",
					"itemDescription",
					"itemName"
				],
				"type": "object",
				"description": "Cart Items"
			},
			"JWTAuthResponse": {
				"properties": {
					"access_token": {
						"type": "string"
					},
					"token_type": {
						"type": "string"
					}
				},
				"required": [
					"access_token",
					"token_type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FirebaseAuthResponse": {
				"properties": {
					"verified": {
						"type": "boolean"
					},
					"auth": {
						"type": "string"
					}
				},
				"required": [
					"verified"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AudioProcessResponse": {
				"properties": {
					"taskId": {
						"type": "string"
					}
				},
				"required": [
					"taskId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SearchRequest": {
				"properties": {
					"query": {
						"type": "string"
					},
					"aiStoreId": {
						"type": "string"
					}
				},
				"required": [
					"query",
					"aiStoreId"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "core-api",
		"version": "1.4.0",
		"description": "API documentation for the KiranaPro - 'PROD' Backend microservice, designed for seamless integration with multiple microservices, including AI, ONDC/ KIKO/ third-party ONDC services, and mobile frontends (iOS & Android).",
		"license": {
			"name": "Proprietary - Copyright (c) 2024, KiranaPro"
		},
		"contact": {
			"name": "Sandeep K ",
			"email": "sandeep@kirana.pro"
		}
	},
	"paths": {
		"/user": {
			"put": {
				"operationId": "UpdateProfile",
				"responses": {
					"200": {
						"description": "The updated profile.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"updatedProfile": {
											"$ref": "#/components/schemas/UserProfile"
										},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"updatedProfile",
										"message"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Invalid inputs"
					}
				},
				"description": "Update the user's profile settings.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The updated profile data (name and/or email).",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateProfileRequest",
								"description": "The updated profile data (name and/or email)."
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetProfile",
				"responses": {
					"200": {
						"description": "The user's profile.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserProfile"
								}
							}
						}
					}
				},
				"description": "Get the user's profile settings.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/user/settings": {
			"get": {
				"operationId": "GetUserSettings",
				"responses": {
					"200": {
						"description": "An array of user settings.",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/CreateSettingResponse"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieve all user settings.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateUserSetting",
				"responses": {
					"200": {
						"description": "A success message.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					},
					"201": {
						"description": "Settings created"
					},
					"400": {
						"description": "Invalid inputs"
					}
				},
				"description": "Create a new user setting.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The key and value of the setting.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateSettingRequest",
								"description": "The key and value of the setting."
							}
						}
					}
				}
			}
		},
		"/user/settings/{key}": {
			"put": {
				"operationId": "UpdateUserSetting",
				"responses": {
					"200": {
						"description": "A success message or an error if the setting is not found.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "Setting not found"
					}
				},
				"description": "Update an existing user setting.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The key of the setting to update.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The updated value.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateSettingRequest",
								"description": "The updated value."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteUserSetting",
				"responses": {
					"200": {
						"description": "A success message or an error if the setting is not found.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "Setting not found"
					}
				},
				"description": "Delete a user setting.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The key of the setting to delete.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/user/address": {
			"get": {
				"operationId": "GetUserAddresses",
				"responses": {
					"200": {
						"description": "An array of user addresses.",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/_AddressType"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get all user addresses.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateUserAddress",
				"responses": {
					"200": {
						"description": "A success message and the created address.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CreatedAddressResponse"
								}
							}
						}
					},
					"201": {
						"description": "Address created"
					},
					"400": {
						"description": "Missing or invalid inputs"
					}
				},
				"description": "Create a new user address.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The address details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/_AddressType",
								"description": "The address details."
							}
						}
					}
				}
			}
		},
		"/user/address/{id}": {
			"get": {
				"operationId": "GetUserAddressById",
				"responses": {
					"200": {
						"description": "The address or an error if not found.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"address": {
											"$ref": "#/components/schemas/_AddressType"
										},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "Address not found"
					}
				},
				"description": "Get a specific user address by ID.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The address ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteUserAddress",
				"responses": {
					"200": {
						"description": "A success message or an error if the address is not found.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"address": {
											"$ref": "#/components/schemas/_AddressType"
										},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "Address not found"
					}
				},
				"description": "Delete a user address by ID.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The address ID.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tasks": {
			"post": {
				"operationId": "CreateTask",
				"responses": {
					"200": {
						"description": "Task ID of the created task",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"task_id": {
											"type": "string"
										}
									},
									"required": [
										"task_id"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Invalid input"
					}
				},
				"description": "Create a new task for a user.",
				"tags": [
					"Task"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "Task creation data",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTaskRequest",
								"description": "Task creation data"
							}
						}
					}
				}
			}
		},
		"/tasks/{taskId}": {
			"get": {
				"operationId": "GetTask",
				"responses": {
					"200": {
						"description": "Task status or details",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TaskResponse"
								}
							}
						}
					},
					"404": {
						"description": "Task not found"
					}
				},
				"description": "Fetch the status or details of a task based on task ID.",
				"tags": [
					"Task"
				],
				"security": [],
				"parameters": [
					{
						"description": "Task ID to retrieve",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/payment": {
			"post": {
				"operationId": "CreatePayment",
				"responses": {
					"200": {
						"description": "The Razorpay order details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RazorPayOrderResponse"
								}
							}
						}
					},
					"400": {
						"description": "Missing or invalid inputs"
					}
				},
				"description": "Create a new Razorpay payment order.",
				"tags": [
					"Payments"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"cartId": {
										"type": "string"
									},
									"amount": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"amount"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/payment/verify": {
			"post": {
				"operationId": "VerifyPayment",
				"responses": {
					"200": {
						"description": "A success message or an error.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"order": {
											"$ref": "#/components/schemas/_OrderResponse"
										},
										"message": {
											"type": "string"
										},
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"message",
										"success"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Missing or invalid inputs"
					}
				},
				"description": "Verify a Razorpay payment and create an order.",
				"tags": [
					"Payments"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The request body with payment and order details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VerifyPaymentRequest",
								"description": "The request body with payment and order details."
							}
						}
					}
				}
			}
		},
		"/order": {
			"get": {
				"operationId": "GetOrders",
				"responses": {
					"200": {
						"description": "A list of orders.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"orders": {
											"items": {
												"$ref": "#/components/schemas/_OrderResponse"
											},
											"type": "array"
										}
									},
									"required": [
										"orders"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Fetch all orders for the logged-in user.",
				"tags": [
					"Orders"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateOrder",
				"responses": {
					"200": {
						"description": "The created order.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"order": {
											"$ref": "#/components/schemas/_OrderResponse"
										},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"order",
										"message"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "CartId and AddressId are required"
					}
				},
				"description": "Create a new order.",
				"tags": [
					"Orders"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The request body containing cartId and addressId.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"addressId": {
										"type": "string"
									},
									"cartId": {
										"type": "string"
									}
								},
								"required": [
									"addressId",
									"cartId"
								],
								"type": "object",
								"description": "The request body containing cartId and addressId."
							}
						}
					}
				}
			}
		},
		"/order/{id}": {
			"get": {
				"operationId": "GetOrder",
				"responses": {
					"200": {
						"description": "The order details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/_OrderResponse"
								}
							}
						}
					}
				},
				"description": "Get a specific order by ID.",
				"tags": [
					"Orders"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The ID of the order to fetch.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/order/{id}/track": {
			"get": {
				"operationId": "TrackOrder",
				"responses": {
					"200": {
						"description": "The order's tracking status.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"deliveryStatus": {
											"type": "string"
										},
										"orderStatus": {
											"type": "string"
										}
									},
									"required": [
										"deliveryStatus",
										"orderStatus"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Get the tracking status of a specific order.",
				"tags": [
					"Orders"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The ID of the order to track.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/order/{id}/cancel": {
			"post": {
				"operationId": "CancelOrder",
				"responses": {
					"200": {
						"description": "A success message or an error.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Cancel an order.",
				"tags": [
					"Orders"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The ID of the order to cancel.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/notifications": {
			"get": {
				"operationId": "GetNotifications",
				"responses": {
					"200": {
						"description": "A list of notifications.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"notifications": {
											"items": {
												"$ref": "#/components/schemas/Notification"
											},
											"type": "array"
										}
									},
									"required": [
										"notifications"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "No notifications found"
					}
				},
				"description": "Fetch all notifications for the logged-in user.",
				"tags": [
					"Notifications"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateNotification",
				"responses": {
					"200": {
						"description": "A success message with the created notification.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CreateNotificationResponse"
								}
							}
						}
					},
					"201": {
						"description": "Notification added successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CreateNotificationResponse"
								}
							}
						}
					},
					"400": {
						"description": "Missing or invalid inputs"
					}
				},
				"description": "Create a new notification.",
				"tags": [
					"Notifications"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The request body containing the notification details.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateNotificationRequest",
								"description": "The request body containing the notification details."
							}
						}
					}
				}
			}
		},
		"/notifications/{id}": {
			"delete": {
				"operationId": "DeleteNotification",
				"responses": {
					"200": {
						"description": "A success message with the deleted notification details.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"notification": {
											"$ref": "#/components/schemas/Notification"
										},
										"message": {
											"type": "string"
										}
									},
									"required": [
										"notification",
										"message"
									],
									"type": "object"
								}
							}
						}
					},
					"404": {
						"description": "Notification not found"
					}
				},
				"description": "Delete a notification by ID.",
				"tags": [
					"Notifications"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The ID of the notification to delete.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/orderStatus": {
			"post": {
				"operationId": "UpdateOrder",
				"responses": {
					"200": {
						"description": "A success message with updated order details.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpdateOrderResponse"
								}
							}
						}
					},
					"400": {
						"description": "Validation error"
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"description": "Updates the status of an order.",
				"tags": [
					"Kiko"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "UpdateOrderRequest object containing the API key, order ID, order status, and delivery status.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateOrderRequest",
								"description": "UpdateOrderRequest object containing the API key, order ID, order status, and delivery status."
							}
						}
					}
				}
			}
		},
		"/home": {
			"get": {
				"operationId": "GetHome",
				"responses": {
					"200": {
						"description": "Home page details",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"carousels": {
											"properties": {
												"title": {
													"type": "string"
												},
												"data": {
													"items": {
														"properties": {
															"deeplink": {
																"type": "string"
															},
															"image_url": {
																"type": "string"
															},
															"id": {
																"type": "string"
															}
														},
														"required": [
															"deeplink",
															"image_url",
															"id"
														],
														"type": "object"
													},
													"type": "array"
												}
											},
											"required": [
												"title",
												"data"
											],
											"type": "object"
										},
										"banners": {
											"properties": {
												"title": {
													"type": "string"
												},
												"data": {
													"items": {
														"properties": {
															"deeplink": {
																"type": "string"
															},
															"image_url": {
																"type": "string"
															},
															"id": {
																"type": "string"
															}
														},
														"required": [
															"deeplink",
															"image_url",
															"id"
														],
														"type": "object"
													},
													"type": "array"
												}
											},
											"required": [
												"title",
												"data"
											],
											"type": "object"
										},
										"welcomeSubText": {
											"type": "string"
										},
										"welcomeText": {
											"type": "string"
										}
									},
									"required": [
										"carousels",
										"banners",
										"welcomeSubText",
										"welcomeText"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves home page data, including welcome text, banners, and carousels.",
				"tags": [
					"Home"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/cart/{cartId}": {
			"put": {
				"operationId": "UpdateCart",
				"responses": {
					"200": {
						"description": "A cart model with updated values",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/_CartResponseType"
								}
							}
						}
					}
				},
				"description": "Updates a cart with the specified cart ID.",
				"tags": [
					"Cart"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "cartId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"updatedItems": {
										"items": {
											"$ref": "#/components/schemas/_CartItemsModelType"
										},
										"type": "array"
									}
								},
								"required": [
									"updatedItems"
								],
								"type": "object"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetCartbyId",
				"responses": {
					"200": {
						"description": "A Cart model",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/_CartResponseType"
								}
							}
						}
					}
				},
				"description": "Fetch specific carts using cartId for a specific user",
				"tags": [
					"Cart"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "incoming cartId",
						"in": "path",
						"name": "cartId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteCartbyId",
				"responses": {
					"200": {
						"description": "A Cart model",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/_CartResponseType"
								}
							}
						}
					}
				},
				"description": "Delete a specific cart using cartId",
				"tags": [
					"Cart"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "cartId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/cart": {
			"post": {
				"operationId": "CreateCart",
				"responses": {
					"200": {
						"description": "A cart model with created cart values.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/_CartResponseType"
								}
							}
						}
					}
				},
				"description": "Creates a new Cart from AI Microservice.",
				"tags": [
					"Cart"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"total": {
										"type": "number",
										"format": "double"
									},
									"combinedSubTotal": {
										"type": "number",
										"format": "double"
									},
									"combinedTotalSavedAmount": {
										"type": "number",
										"format": "double"
									},
									"data": {
										"$ref": "#/components/schemas/TaskResult"
									}
								},
								"required": [
									"total",
									"combinedSubTotal",
									"combinedTotalSavedAmount",
									"data"
								],
								"type": "object"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetAllCarts",
				"responses": {
					"200": {
						"description": "A list of Cart",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/_CartResponseType"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Fetch multiple carts for a specific user",
				"tags": [
					"Cart"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/cart/{cartId}/items": {
			"post": {
				"operationId": "CreateCartItems",
				"responses": {
					"200": {
						"description": "A list of CartItems which are inserted",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/CartItemsModelType"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Create multiple cartItems for a specific cart with cartId",
				"tags": [
					"Cart"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "cartId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "contains a list of CartItems and cartId",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"combinedCartItems": {
										"items": {
											"$ref": "#/components/schemas/CartItemsModelType"
										},
										"type": "array"
									}
								},
								"required": [
									"combinedCartItems"
								],
								"type": "object",
								"description": "contains a list of CartItems and cartId"
							}
						}
					}
				}
			}
		},
		"/cart/coupon": {
			"post": {
				"operationId": "UpdateCartWithCouponCode",
				"responses": {
					"200": {
						"description": "A list of CartItems which are inserted",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/_CartResponseType"
								}
							}
						}
					}
				},
				"description": "Create multiple cartItems for a specific cart with cartId",
				"tags": [
					"Cart"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "contains a list of CartItems and cartId",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"couponCode": {
										"type": "string"
									},
									"cartId": {
										"type": "string"
									}
								},
								"required": [
									"couponCode",
									"cartId"
								],
								"type": "object",
								"description": "contains a list of CartItems and cartId"
							}
						}
					}
				}
			}
		},
		"/auth/continue": {
			"post": {
				"operationId": "GetJWTAuth",
				"responses": {
					"200": {
						"description": "An access token with bearer type",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/JWTAuthResponse"
								}
							}
						}
					}
				},
				"description": "Generate a JWT for the user",
				"tags": [
					"Auth"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"token": {
										"type": "string"
									}
								},
								"required": [
									"token"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/auth/verify-token": {
			"get": {
				"operationId": "GetFirebaseAuth",
				"responses": {
					"200": {
						"description": "Firebase authentication status",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FirebaseAuthResponse"
								}
							}
						}
					}
				},
				"description": "Verify Firebase authentication",
				"tags": [
					"Auth"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/audio": {
			"post": {
				"operationId": "ProcessAudio",
				"responses": {
					"200": {
						"description": "A task ID for the processed audio",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AudioProcessResponse"
								}
							}
						}
					}
				},
				"description": "Process an uploaded audio file and return a task ID.",
				"tags": [
					"Audio"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The User-Agent header for device identification. Eg: `CustomAgent/1.0 (lat: <latitude>; lon: <longitude>)`",
						"in": "header",
						"name": "user-agent",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"audio": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"audio"
								]
							}
						}
					}
				}
			}
		},
		"/ai/{taskId}": {
			"get": {
				"operationId": "GetCartStatus",
				"responses": {
					"200": {
						"description": "The cart status or cart details.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"cart": {
											"$ref": "#/components/schemas/_CartResponseType"
										},
										"error": {
											"type": "string"
										},
										"cartStatus": {
											"type": "string"
										}
									},
									"required": [
										"cartStatus"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Task ID missing!"
					}
				},
				"description": "Fetches the cart status or details based on task ID.",
				"tags": [
					"AI"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The unique task ID.",
						"in": "path",
						"name": "taskId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/ai/search": {
			"post": {
				"operationId": "SearchItems",
				"responses": {
					"200": {
						"description": "The search results.",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/CartItemsModelType"
									},
									"type": "array"
								}
							}
						}
					},
					"400": {
						"description": "Missing or invalid inputs!"
					}
				},
				"description": "Searches for items based on a query and AI store ID.",
				"tags": [
					"AI"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The search request containing the query and AI store ID.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SearchRequest",
								"description": "The search request containing the query and AI store ID."
							}
						}
					}
				}
			}
		},
		"/ai": {
			"get": {
				"operationId": "GetPincodeAvailability",
				"responses": {
					"200": {
						"description": "Whether stores are available in the pincode.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"pincode": {
											"type": "boolean"
										}
									},
									"required": [
										"pincode"
									],
									"type": "object"
								}
							}
						}
					},
					"400": {
						"description": "Missing or invalid User-Agent header."
					}
				},
				"description": "Retrieves the pincode from the User-Agent header.",
				"tags": [
					"AI"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "The User-Agent header.",
						"in": "query",
						"name": "userAgent",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/v1"
		}
	]
}