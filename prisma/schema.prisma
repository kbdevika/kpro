// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(uuid())
  settings  UserSetting[]
  addresses Address[]
  tasks     Task[]
  carts     Cart[]

  @@index([id])
}

model UserSetting {
  id     Int    @id @default(autoincrement())
  userId String
  key    String
  value  String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, key])
  @@index([key])
  @@index([userId])
}

model Address {
  id            Int     @id @default(autoincrement())
  userId        String
  address_line1 String  @default("NaN")
  address_line2 String  @default("NaN")
  street        String
  city          String
  state         String
  country       String
  latitude      Float   @default(0.00)
  longitude     Float   @default(0.00)
  addressType   String  @default("Home")
  landmark      String  @default("NaN")
  postalCode    String  @map("postal_code")
  user          User    @relation(fields: [userId], references: [id])
  Order    Order[]
  
  @@index([userId])
}

model Cart {
  id       String     @id @default(uuid())
  userId   String
  vendorId String     @default("null")
  items    CartItem[]
  user     User       @relation(fields: [userId], references: [id])
  Order    Order[]

  @@index([userId])
}

model CartItem {
  id                Int    @id @default(autoincrement())
  cartId            String
  externalProductId String @default("null")
  name              String
  description       String
  quantity          Int
  units             String
  price             Float
  image             String
  cart              Cart   @relation(fields: [cartId], references: [id])

  @@index([cartId])
}

model Order {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  totalAmount    Float    @default(0.00)
  storeName      String   @default("null")
  vendorId       String   @default("null")
  addressId      Int?     
  address        Address?  @relation(fields: [addressId], references: [id])
  cartId         String
  status         String
  deliveryStatus String   @default("Not-Initiated")
  cart           Cart     @relation(fields: [cartId], references: [id])

  @@index([cartId])
}

model Task {
  id        String     @id @default(uuid())
  status    String
  summary   String
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  lineItems LineItem[]

  @@index([userId])
}

model LineItem {
  id       Int    @id @default(autoincrement())
  taskId   String
  name     String
  quantity String
  task     Task   @relation(fields: [taskId], references: [id])

  @@index([taskId])
}

model Notification {
  id          String   @id @default(uuid())
  message     String
  mediaUrl    String? // Optional field for media
  createdDate DateTime @default(now())
}

model Catalogue {
  id        String   @id @default(uuid())
  pincode   String   @unique
  jsonData  Json
  createdAt DateTime @default(now())
}
