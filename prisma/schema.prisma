// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(uuid())
  settings  UserSetting[]
  addresses Address[]
  tasks     Task[]
  carts     Cart[]

  @@index([id])
}

model UserSetting {
  id     Int    @id @default(autoincrement())
  userId String
  key    String
  value  String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, key])
  @@index([key])
  @@index([userId])
}

model Address {
  id            Int     @id @default(autoincrement())
  userId        String
  address_line1 String  @default("NaN")
  address_line2 String  @default("NaN")
  street        String
  city          String
  state         String
  country       String
  latitude      Float   @default(0.00)
  longitude     Float   @default(0.00)
  addressType   String  @default("Home")
  landmark      String  @default("NaN")
  postalCode    String  @map("postal_code")
  user          User    @relation(fields: [userId], references: [id])
  Order         Order[]

  @@index([userId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String
  vendorId  String     @default("null")
  items     CartItem[]
  storeName String?
  user      User       @relation(fields: [userId], references: [id])
  Order     Order[]

  @@index([userId])
}

model CartItem {
  id                Int      @id @default(autoincrement())
  cartId            String
  externalProductId String   @default("null")
  name              String
  description       String
  quantity          Int
  units             String
  price             Float
  image             String
  recommended       Boolean?
  Cart              Cart     @relation(fields: [cartId], references: [id])

  @@index([cartId])
}

model Order {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  totalAmount    Float    @default(0.00)
  storeName      String   @default("null")
  vendorId       String   @default("null")
  addressId      Int?
  address        Address? @relation(fields: [addressId], references: [id])
  cartId         String
  status         String
  deliveryStatus String   @default("Not-Initiated")
  cart           Cart     @relation(fields: [cartId], references: [id])

  @@index([cartId])
}

model Task {
  id          String   @id @default(uuid())
  status      String
  cartId      String
  taskId      String
  userId      String
  createdDate DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Notification {
  id          String   @id @default(uuid())
  userId      String?
  message     String
  mediaUrl    String?
  createdDate DateTime @default(now())
}

model Catalogue {
  id        String   @id @default(uuid())
  pincode   String   @unique
  jsonData  Json
  createdAt DateTime @default(now())
}

model Admin {
  id        String   @id @unique @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ----------------------------------------------------- v2 ----------------------------------------------------- //

model CartItemsModel {
  id                  String    @id @default(cuid())
  itemName            String
  itemDescription     String
  itemImageUrl        String
  itemQuantity        Int
  itemOriginalPrice   Float
  itemDiscountedPrice Float
  itemStockStatus     String
  itemWeight          Float
  itemWeightUnit      String
  itemRecommended     Boolean
  itemExternalId      String?
  cartId              String
  cart                CartModel @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([itemRecommended])
  @@index([itemStockStatus])
}

model CartModel {
  id                        String           @id @default(cuid())
  cartStoreId               String
  cartaiStoreId             String           @default("")
  cartStoreName             String
  cartStorePhone            String
  cartStoreContact          String
  cartStoreAddress          String
  cartItems                 CartItemsModel[]
  cartSubTotal              Float
  cartTotal                 Float
  cartDeliverytime          Float
  cartFreeDeliveryThreshold Float
  cartDeliveryCharges       Float
  cartDiscount              Float
  cartSaved                 Float
  cartSavingsMessage        String
  cartNote                  String
  orders                    OrderModel[]     @relation("CartToOrders")
  task                      TaskModel?
  userId                    String
  user                      UserModel        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([cartStoreId])
}

model AdminModel {
  id             String   @id @default(cuid())
  adminEmail     String   @unique
  adminPassword  String
  adminCreatedAt DateTime @default(now())
  adminUpdatedAt DateTime @updatedAt

  @@index([id])
}

model NotificationModel {
  id                      String    @id @default(cuid())
  notificationMessage     String
  notificationMediaUrl    String?
  notificationCreatedDate DateTime  @default(now())
  userId                  String
  user                    UserModel @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([userId])
}

model UserAddressModel {
  id                  String       @id @default(cuid())
  addressLine1        String
  addressLine2        String
  addressStreet       String
  addressCity         String
  addressState        String
  addressCountry      String
  addressPostalCode   Int
  addressLatitude     Float
  addressLongitude    Float
  addressAddressType  String
  addressLandmark     String
  addressContactName  String
  addressContactPhone String
  userId              String
  user                UserModel    @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderModel          OrderModel[]

  @@index([id])
  @@index([userId])
  @@index([addressPostalCode])
}

model UserSettingsModel {
  id            String    @id @default(cuid())
  settingsKey   String
  settingsValue String
  userId        String
  user          UserModel @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, settingsKey])
  @@index([settingsKey])
  @@index([id])
  @@index([userId])
}

model UserModel {
  id            String              @id @default(cuid())
  userArchived  Boolean             @default(false)
  settings      UserSettingsModel[]
  addresses     UserAddressModel[]
  notifications NotificationModel[]
  order         OrderModel[]
  TaskModel     TaskModel[]
  CartModel     CartModel[]

  @@index([id])
}

model TaskModel {
  id              String    @id @default(cuid())
  taskStatus      String
  taskExternalId  String    @unique
  taskCreatedDate DateTime  @default(now())
  cartId          String    @unique
  cart            CartModel @relation(fields: [cartId], references: [id])
  userId          String
  user            UserModel @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([userId])
  @@index([cartId])
  @@index([taskExternalId])
}

model OrderModel {
  id                  String           @id @default(cuid())
  orderStatus         String
  orderDeliveryStatus String
  addressId           String
  cartId              String
  userId              String
  address             UserAddressModel @relation(fields: [addressId], references: [id])
  cart                CartModel        @relation(fields: [cartId], references: [id], name: "CartToOrders")
  user                UserModel        @relation(fields: [userId], references: [id])

  @@index([id])
  @@index([userId])
  @@index([cartId])
  @@index([addressId])
}
